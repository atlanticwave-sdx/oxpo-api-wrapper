version: '3.9'

services:

  amlight:
    container_name: amlight
    image: amlight
    privileged: true
    tty: true
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.2
    ports:
      - 6653:6653
      - 8181:8181
    volumes:
      - ./scripts:/scripts
    env_file: 
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INITDB_ROOT_USERNAME: ${ROOT_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${ROOT_DB_PASS}
      MONGO_USERNAME: 'amlight_user'
      MONGO_PASSWORD: 'amlight_pwd'
      MONGO_DBNAME: 'amlight'
      MODEL_VERSION: ${MODEL_VERSION}
      OXPO_ID: 1
      OXPOS: ${SDX_OXPOS}
      OXPO_NAMES: ${SDX_OXPO_NAMES}
      OXPO_URLS: ${SDX_OXPO_URLS}
      # 
      SDXTOPOLOGY_VALIDATOR: ${SDX_TOPOLOGY_VALIDATOR}
      KYTOS_TOPOLOGY: ${KYTOS_TOPOLOGY}
      KYTOSSDX_TOPOLOGY: ${KYTOS_SDX_TOPOLOGY}
    depends_on:
      - mongo-ready
    entrypoint: ["/scripts/amlight.sh"]

  sax:
    container_name: sax
    image: sax
    privileged: true
    tty: true
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.3
    ports:
      - 6654:6653
      - 8282:8181
    volumes:
      - ./scripts:/scripts
    env_file: 
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INITDB_ROOT_USERNAME: ${ROOT_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${ROOT_DB_PASS}
      MONGO_USERNAME: 'sax_user'
      MONGO_PASSWORD: 'sax_pwd'
      MONGO_DBNAME: 'sax'
      MODEL_VERSION: ${MODEL_VERSION}
      OXPO_ID: 2
      OXPOS: ${SDX_OXPOS}
      OXPO_NAMES: ${SDX_OXPO_NAMES}
      OXPO_URLS: ${SDX_OXPO_URLS}
      # 
      SDXTOPOLOGY_VALIDATOR: ${SDX_TOPOLOGY_VALIDATOR}
      KYTOS_TOPOLOGY: ${KYTOS_TOPOLOGY}
      KYTOSSDX_TOPOLOGY: ${KYTOS_SDX_TOPOLOGY}
    depends_on:
      - mongo-ready
    entrypoint: ["/scripts/sax.sh"]

  tenet:
    container_name: tenet
    image: tenet
    privileged: true
    restart: always
    tty: true
    networks:
      kytos_network:
        ipv4_address: 192.168.0.4
    ports:
      - 6655:6653
      - 8383:8181
    volumes:
      - ./scripts:/scripts
    env_file: 
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INITDB_ROOT_USERNAME: ${ROOT_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${ROOT_DB_PASS}
      MONGO_USERNAME: 'tenet_user'
      MONGO_PASSWORD: 'tenet_pwd'
      MONGO_DBNAME: 'tenet'
      MODEL_VERSION: ${MODEL_VERSION}
      OXPO_ID: 3
      OXPOS: ${SDX_OXPOS}
      OXPO_NAMES: ${SDX_OXPO_NAMES}
      OXPO_URLS: ${SDX_OXPO_URLS}
      # 
      SDXTOPOLOGY_VALIDATOR: ${SDX_TOPOLOGY_VALIDATOR}
      KYTOS_TOPOLOGY: ${KYTOS_TOPOLOGY}
      KYTOSSDX_TOPOLOGY: ${KYTOS_SDX_TOPOLOGY}
    depends_on:
      - mongo-ready
    entrypoint: ["/scripts/tenet.sh"]

  listen-events:
    container_name: listen-events
    image: listen-events
    privileged: true
    tty: true
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.5
    ports:
      - 6656:6653
      - 8484:8181
    volumes:
      - ./scripts:/scripts
    env_file: 
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INITDB_ROOT_USERNAME: ${ROOT_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${ROOT_DB_PASS}
      MONGO_USERNAME: 'topology_events_user'
      MONGO_PASSWORD: 'topology_events_pwd'
      MONGO_DBNAME: 'topology_events'
    depends_on:
      - mongo-ready
    entrypoint: ["/scripts/listen-events.sh"]

  mongo1t:
    container_name: mongo1t
    image: mongo-db
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.6
    ports:
      - 27027:27027
    volumes:
      - ./os-base/mongo-base:/mongo_base
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--port", "27027" ]
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INIT_ROOT_USERNAME: ${ROOT_DB_USER}
      MONGO_INIT_ROOT_PASSWORD: ${ROOT_DB_PASS}
      MONGO_DBNAME: ${ROOT_DB}

  mongo2t:
    container_name: mongo2t
    image: mongo-db
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.7
    ports:
      - 27028:27028
    volumes:
      - ./os-base/mongo-base:/mongo_base
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--port", "27028" ]
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INIT_ROOT_USERNAME: ${ROOT_DB_USER}
      MONGO_INIT_ROOT_PASSWORD: ${ROOT_DB_PASS}
      MONGO_DBNAME: ${ROOT_DB}

  mongo3t:
    container_name: mongo3t
    image: mongo-db
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.8
    ports:
      - 27029:27029
    volumes:
      - ./os-base/mongo-base:/mongo_base
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--port", "27029" ]
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INIT_ROOT_USERNAME: ${ROOT_DB_USER}
      MONGO_INIT_ROOT_PASSWORD: ${ROOT_DB_PASS}
      MONGO_DBNAME: ${ROOT_DB}

  mongo-setup:
    container_name: mongo-rs-init
    image: mongo-db
    restart: on-failure
    networks:
      kytos_network:
        ipv4_address: 192.168.0.9
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/scripts/rs-init.sh"]
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INIT_ROOT_USERNAME: ${ROOT_DB_USER}
      MONGO_INIT_ROOT_PASSWORD: ${ROOT_DB_PASS}
      MONGO_DBNAME: ${ROOT_DB}
    depends_on:
      - mongo1t
      - mongo2t
      - mongo3t

  mongo-ready:
    container_name: mongo-test-ready
    image: mongo-db
    restart: on-failure
    networks:
      kytos_network:
        ipv4_address: 192.168.0.10
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/scripts/rs-add.sh"]
    env_file:
      - .env
    environment:
      MONGODB_CONNSTRING: ${MONGODB_CONNSTRING}
      MONGO_HOST_SEEDS: ${MONGO_HOST_SEEDS}
      MONGO_INIT_ROOT_USERNAME: ${ROOT_DB_USER}
      MONGO_INIT_ROOT_PASSWORD: ${ROOT_DB_PASS}
      MONGO_DBNAME: ${ROOT_DB}
    depends_on:
      - mongo-setup

  mininet:
    container_name: mininet
    image: mininet
    privileged: true
    tty: true
    networks:
      kytos_network:
        ipv4_address: 192.168.0.11
    volumes:
      - /lib/modules:/lib/modules
    depends_on:
      - amlight
      - sax
      - tenet

  rabbitmq3:
    container_name: "rabbitmq"
    image: rabbit-mq
    hostname: "rabbitmq-host"
    networks:
      kytos_network:
        ipv4_address: 192.168.0.12
    ports:
      # AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}

  nginx:
    container_name: nginx
    image: nginx
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.13
    ports:
      - 80:8080
    volumes:
      - ./os-base/nginx-base:/topology
    environment:
      SWAGGER_JSON: /topology/validator.json
      DEFAULT_TOPOLOGY: ${DEFAULT_TOPOLOGY}
      DEFAULT_CONNECTION: ${DEFAULT_CONNECTION}
      DEFAULT_URL: ${DEFAULT_URL}
      TOPOLOGY_PATH: ${TOPOLOGY_PATH}
      CONNECTION_PATH: ${CONNECTION_PATH}
      TOPOLOGY_1: ${TOPOLOGY_1}
      TOPOLOGY_2: ${TOPOLOGY_2}
      TOPOLOGY_3: ${TOPOLOGY_3}
      CONNECTION_1: ${CONNECTION_1}
      CONNECTION_2: ${CONNECTION_2}
      CONNECTION_3: ${CONNECTION_3}
      URL_1: ${URL_1}
      URL_2: ${URL_2}
      URL_3: ${URL_3}

  validator:
    container_name: validator
    image: validator
    privileged: true
    tty: true
    restart: always
    networks:
      kytos_network:
        ipv4_address: 192.168.0.14
    ports:
      - 8000:8000
    volumes:
      - ./scripts:/scripts
    entrypoint: [ "gunicorn", "validator.app:app", "-b", "0.0.0.0:8000" ]

networks:
  kytos_network:
    ipam:
      driver: default
      config:
        - subnet: 192.168.0.0/24
          gateway: 192.168.0.1

volumes:
  persistent:
