# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Port(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, port_id=None, name=None, node=None, type=None, mtu=None, status=None, state=None):  # noqa: E501
        """Port - a model defined in OpenAPI

        :param port_id: The port_id of this Port.  # noqa: E501
        :type port_id: str
        :param name: The name of this Port.  # noqa: E501
        :type name: str
        :param node: The node of this Port.  # noqa: E501
        :type node: str
        :param type: The type of this Port.  # noqa: E501
        :type type: str
        :param mtu: The mtu of this Port.  # noqa: E501
        :type mtu: int
        :param status: The status of this Port.  # noqa: E501
        :type status: str
        :param state: The state of this Port.  # noqa: E501
        :type state: str
        """
        self.openapi_types = {
            'port_id': str,
            'name': str,
            'node': str,
            'type': str,
            'mtu': int,
            'status': str,
            'state': str
        }

        self.attribute_map = {
            'port_id': 'port_id',
            'name': 'name',
            'node': 'node',
            'type': 'type',
            'mtu': 'mtu',
            'status': 'status',
            'state': 'state'
        }

        self._port_id = port_id
        self._name = name
        self._node = node
        self._type = type
        self._mtu = mtu
        self._status = status
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'Port':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The port of this Port.  # noqa: E501
        :rtype: Port
        """
        return util.deserialize_model(dikt, cls)

    @property
    def port_id(self):
        """Gets the port_id of this Port.


        :return: The port_id of this Port.
        :rtype: str
        """
        return self._port_id

    @port_id.setter
    def port_id(self, port_id):
        """Sets the port_id of this Port.


        :param port_id: The port_id of this Port.
        :type port_id: str
        """
        if port_id is None:
            raise ValueError("Invalid value for `port_id`, must not be `None`")  # noqa: E501
        if port_id is not None and not re.search(r'^((urn:sdx:port:)[A-Za-z_.-]*$)', port_id):  # noqa: E501
            raise ValueError("Invalid value for `port_id`, must be a follow pattern or equal to `/^((urn:sdx:port:)[A-Za-z_.-]*$)/`")  # noqa: E501

        self._port_id = port_id

    @property
    def name(self):
        """Gets the name of this Port.


        :return: The name of this Port.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Port.


        :param name: The name of this Port.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 30:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `30`")  # noqa: E501
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")  # noqa: E501
        if name is not None and not re.search(r'^[A-Za-z_.-]*$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z_.-]*$/`")  # noqa: E501

        self._name = name

    @property
    def node(self):
        """Gets the node of this Port.


        :return: The node of this Port.
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this Port.


        :param node: The node of this Port.
        :type node: str
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")  # noqa: E501

        self._node = node

    @property
    def type(self):
        """Gets the type of this Port.


        :return: The type of this Port.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Port.


        :param type: The type of this Port.
        :type type: str
        """
        allowed_values = ["100FE", "1GE", "10GE", "25GE", "40GE", "50GE", "100GE", "400GE", "Other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def mtu(self):
        """Gets the mtu of this Port.


        :return: The mtu of this Port.
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this Port.


        :param mtu: The mtu of this Port.
        :type mtu: int
        """

        self._mtu = mtu

    @property
    def status(self):
        """Gets the status of this Port.


        :return: The status of this Port.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Port.


        :param status: The status of this Port.
        :type status: str
        """
        allowed_values = ["up", "down", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def state(self):
        """Gets the state of this Port.


        :return: The state of this Port.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Port.


        :param state: The state of this Port.
        :type state: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
