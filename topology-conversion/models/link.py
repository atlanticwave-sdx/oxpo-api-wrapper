# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.port import Port
import re
from openapi_server import util

from openapi_server.models.port import Port  # noqa: E501
import re  # noqa: E501

class Link(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, link_id=None, name=None, ports=None, type=None, bandwidth=None, residual_bandwidth=None, latency=None, packet_loss=None, availability=None, status=None, state=None):  # noqa: E501
        """Link - a model defined in OpenAPI

        :param link_id: The link_id of this Link.  # noqa: E501
        :type link_id: str
        :param name: The name of this Link.  # noqa: E501
        :type name: str
        :param ports: The ports of this Link.  # noqa: E501
        :type ports: List[Port]
        :param type: The type of this Link.  # noqa: E501
        :type type: str
        :param bandwidth: The bandwidth of this Link.  # noqa: E501
        :type bandwidth: float
        :param residual_bandwidth: The residual_bandwidth of this Link.  # noqa: E501
        :type residual_bandwidth: float
        :param latency: The latency of this Link.  # noqa: E501
        :type latency: float
        :param packet_loss: The packet_loss of this Link.  # noqa: E501
        :type packet_loss: float
        :param availability: The availability of this Link.  # noqa: E501
        :type availability: float
        :param status: The status of this Link.  # noqa: E501
        :type status: str
        :param state: The state of this Link.  # noqa: E501
        :type state: str
        """
        self.openapi_types = {
            'link_id': str,
            'name': str,
            'ports': List[Port],
            'type': str,
            'bandwidth': float,
            'residual_bandwidth': float,
            'latency': float,
            'packet_loss': float,
            'availability': float,
            'status': str,
            'state': str
        }

        self.attribute_map = {
            'link_id': 'link_id',
            'name': 'name',
            'ports': 'ports',
            'type': 'type',
            'bandwidth': 'bandwidth',
            'residual_bandwidth': 'residual_bandwidth',
            'latency': 'latency',
            'packet_loss': 'packet_loss',
            'availability': 'availability',
            'status': 'status',
            'state': 'state'
        }

        self._link_id = link_id
        self._name = name
        self._ports = ports
        self._type = type
        self._bandwidth = bandwidth
        self._residual_bandwidth = residual_bandwidth
        self._latency = latency
        self._packet_loss = packet_loss
        self._availability = availability
        self._status = status
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'Link':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The link of this Link.  # noqa: E501
        :rtype: Link
        """
        return util.deserialize_model(dikt, cls)

    @property
    def link_id(self):
        """Gets the link_id of this Link.


        :return: The link_id of this Link.
        :rtype: str
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """Sets the link_id of this Link.


        :param link_id: The link_id of this Link.
        :type link_id: str
        """
        if link_id is None:
            raise ValueError("Invalid value for `link_id`, must not be `None`")  # noqa: E501
        if link_id is not None and not re.search(r'^((urn:sdx:link:)[A-Za-z_.-]*$)', link_id):  # noqa: E501
            raise ValueError("Invalid value for `link_id`, must be a follow pattern or equal to `/^((urn:sdx:link:)[A-Za-z_.-]*$)/`")  # noqa: E501

        self._link_id = link_id

    @property
    def name(self):
        """Gets the name of this Link.


        :return: The name of this Link.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Link.


        :param name: The name of this Link.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 30:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `30`")  # noqa: E501
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")  # noqa: E501
        if name is not None and not re.search(r'^[A-Za-z_.-]*$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z_.-]*$/`")  # noqa: E501

        self._name = name

    @property
    def ports(self):
        """Gets the ports of this Link.


        :return: The ports of this Link.
        :rtype: List[Port]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Link.


        :param ports: The ports of this Link.
        :type ports: List[Port]
        """
        if ports is None:
            raise ValueError("Invalid value for `ports`, must not be `None`")  # noqa: E501

        self._ports = ports

    @property
    def type(self):
        """Gets the type of this Link.


        :return: The type of this Link.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Link.


        :param type: The type of this Link.
        :type type: str
        """
        allowed_values = ["intra", "inter"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def bandwidth(self):
        """Gets the bandwidth of this Link.


        :return: The bandwidth of this Link.
        :rtype: float
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this Link.


        :param bandwidth: The bandwidth of this Link.
        :type bandwidth: float
        """
        if bandwidth is None:
            raise ValueError("Invalid value for `bandwidth`, must not be `None`")  # noqa: E501
        if bandwidth is not None and bandwidth > 1000000:  # noqa: E501
            raise ValueError("Invalid value for `bandwidth`, must be a value less than or equal to `1000000`")  # noqa: E501
        if bandwidth is not None and bandwidth < 1:  # noqa: E501
            raise ValueError("Invalid value for `bandwidth`, must be a value greater than or equal to `1`")  # noqa: E501

        self._bandwidth = bandwidth

    @property
    def residual_bandwidth(self):
        """Gets the residual_bandwidth of this Link.


        :return: The residual_bandwidth of this Link.
        :rtype: float
        """
        return self._residual_bandwidth

    @residual_bandwidth.setter
    def residual_bandwidth(self, residual_bandwidth):
        """Sets the residual_bandwidth of this Link.


        :param residual_bandwidth: The residual_bandwidth of this Link.
        :type residual_bandwidth: float
        """
        if residual_bandwidth is not None and residual_bandwidth > 100:  # noqa: E501
            raise ValueError("Invalid value for `residual_bandwidth`, must be a value less than or equal to `100`")  # noqa: E501
        if residual_bandwidth is not None and residual_bandwidth < 0:  # noqa: E501
            raise ValueError("Invalid value for `residual_bandwidth`, must be a value greater than or equal to `0`")  # noqa: E501

        self._residual_bandwidth = residual_bandwidth

    @property
    def latency(self):
        """Gets the latency of this Link.


        :return: The latency of this Link.
        :rtype: float
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this Link.


        :param latency: The latency of this Link.
        :type latency: float
        """
        if latency is not None and latency > 1000000:  # noqa: E501
            raise ValueError("Invalid value for `latency`, must be a value less than or equal to `1000000`")  # noqa: E501
        if latency is not None and latency < 1:  # noqa: E501
            raise ValueError("Invalid value for `latency`, must be a value greater than or equal to `1`")  # noqa: E501

        self._latency = latency

    @property
    def packet_loss(self):
        """Gets the packet_loss of this Link.


        :return: The packet_loss of this Link.
        :rtype: float
        """
        return self._packet_loss

    @packet_loss.setter
    def packet_loss(self, packet_loss):
        """Sets the packet_loss of this Link.


        :param packet_loss: The packet_loss of this Link.
        :type packet_loss: float
        """
        if packet_loss is not None and packet_loss > 100:  # noqa: E501
            raise ValueError("Invalid value for `packet_loss`, must be a value less than or equal to `100`")  # noqa: E501
        if packet_loss is not None and packet_loss < 0:  # noqa: E501
            raise ValueError("Invalid value for `packet_loss`, must be a value greater than or equal to `0`")  # noqa: E501

        self._packet_loss = packet_loss

    @property
    def availability(self):
        """Gets the availability of this Link.


        :return: The availability of this Link.
        :rtype: float
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this Link.


        :param availability: The availability of this Link.
        :type availability: float
        """
        if availability is not None and availability > 100:  # noqa: E501
            raise ValueError("Invalid value for `availability`, must be a value less than or equal to `100`")  # noqa: E501
        if availability is not None and availability < 0:  # noqa: E501
            raise ValueError("Invalid value for `availability`, must be a value greater than or equal to `0`")  # noqa: E501

        self._availability = availability

    @property
    def status(self):
        """Gets the status of this Link.


        :return: The status of this Link.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Link.


        :param status: The status of this Link.
        :type status: str
        """
        allowed_values = ["up", "down", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def state(self):
        """Gets the state of this Link.


        :return: The state of this Link.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Link.


        :param state: The state of this Link.
        :type state: str
        """
        allowed_values = ["enabled", "disabled", "maintenance"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
